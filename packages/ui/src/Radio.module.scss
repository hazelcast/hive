@use '../styles/constants' as c;
@use '../styles/helpers' as h;

.wrapper {
  display: inline-flex;
  // inline-flex changes vertical align compared to display: flex
  // setting vertical-align allows us to easily use radio button
  // inline e.g. next to the text
  // Most common use case will be still the usage in a form where parent
  // wrapper controls this.
  vertical-align: bottom;
  align-items: center;
  cursor: pointer;

  @include c.typographyBodySmall;

  // hide native checkbox
  input {
    @include h.visuallyHidden;
  }

  .helperText {
    margin-left: c.$grid * 0.5;
  }

  // default visible checkmark
  .checkmark {
    width: c.$iconSizeSmall;
    height: c.$iconSizeSmall;
    border: c.$borderWidth solid c.$colorNeutralLight;
    border-radius: 50%;
    // because of ~ and + selectors used below, we need to keep the current order in DOM and
    // fix it visually with order property
    order: -1;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  &.inline {
    .checkmark {
      // in case we have inline mode, we should have a padding like native radio button has
      margin-left: c.$grid;
    }
  }

  & > input:checked ~ .checkmark {
    background-color: c.$colorSuccessLight;
    border-color: c.$colorSuccessLight;
  }

  /**
    Hover
   */
  &:hover,
  &.hover {
    input ~ .checkmark {
      border-color: c.$colorPrimary;
    }
  }

  /* Style the indicator (dot/circle) */
  .checkmark::after {
    content: '';
    width: 1.5 * c.$grid;
    height: 1.5 * c.$grid;
    border-radius: 50%;
    background: transparent;
  }

  input:checked ~ .checkmark::after {
    background: c.$colorNeutralWhite;
  }

  .name {
    padding-left: c.$grid * 1.25;
    padding-right: c.$grid * 1.25;
  }

  &.disabled {
    cursor: not-allowed;
    color: c.$colorNeutralLight;

    input ~ .checkmark {
      border-color: c.$colorNeutralLight;
    }

    input:checked ~ .checkmark {
      background-color: c.$colorNeutral;
    }
  }

  // Error state
  &.error input:checked ~ .checkmark {
    border-color: c.$colorError;
  }

  // :checked, :not(:checked) is added here to make the specificity more important than the error's state
  // where we make the radio as error if and only if it's checked
  &.focus > input:not(:checked),
  &.focus > input:checked,
  input:focus:not(:checked),
  input:focus:checked {
    ~ .checkmark {
      @include h.outlineFormField;
    }
  }
}
