@use '../styles/constants' as c;
@use '../styles/helpers' as h;

.wrapper {
  display: inline-flex;
  // inline-flex changes vertical align compared to display: flex
  // setting vertical-align allows us to easily use radio button
  // inline e.g. next to the text
  // Most common use case will be still the usage in a form where parent
  // wrapper controls this.
  vertical-align: bottom;
  user-select: none;
  cursor: pointer;

  @include c.typographyBodySmall;

  // hide native checkbox
  input {
    height: 1px;
    width: 1px;
    opacity: 0;
    position: absolute;
  }

  // default visible checkmark
  .checkmark {
    width: c.$iconSizeSmall;
    height: c.$iconSizeSmall;
    border: c.$borderWidth solid c.$colorNeutralLight;
    border-radius: 50%;
    // because of ~ and + selectors used below, we need to keep the current order in DOM and
    // fix it visually with order property
    order: -1;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  input:checked ~ .checkmark {
    background-color: c.$colorSuccessLight;
    border-color: c.$colorSuccessLight;
  }

  /* Style the indicator (dot/circle) */
  .checkmark::after {
    content: '';
    width: 1.5 * c.$grid;
    height: 1.5 * c.$grid;
    border-radius: 50%;
    background: transparent;
  }

  input:checked ~ .checkmark::after {
    background: c.$colorNeutralWhite;
  }

  .name {
    padding-left: c.$grid * 1.25;
    padding-right: c.$grid * 1.25;
  }
}

.wrapper:not(.checked) {
  color: c.$colorTextSecondary;
}

/**
  Disabled
*/
.wrapper.disabled {
  color: c.$colorNeutralLight;
  cursor: not-allowed;
}

// Outline on focus
label.wrapper.focus .checkmark,
label.wrapper > input:focus ~ .checkmark,
label.wrapper > input:checked:focus ~ .checkmark {
  @include h.outlineFormField;
}

label.wrapper.disabled > input:indeterminate ~ .checkmark,
label.wrapper.disabled > input:checked ~ .checkmark {
  background-color: c.$colorNeutral;
  border-color: c.$colorNeutralLight;
}
