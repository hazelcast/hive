@use '../../../styles/constants' as c;
@use '../../../styles/helpers' as h;

/*
 * Note:
 * What's the motivation for statically settings the height of this particular element?
 * We need to prevent the height of this element to expand the size of the calendar popper itself.
 * There are basically 2 ways to do this:
 * 1. Settings the height of the popper container
 * 2. Settings the height of the element itself
 *
 * Even though I think option 1 is readable a bit better, there is this odd feature, where react-datepicker
 * renders 6 weeks (rows) instead of 5 for some of the months. This expands the height by 1 week row,
 * and would cause overflow in case of option 1.
 * Therefore only option 2 is left.
 */
$calendarTimeHeight: 227px;
// Note: Add padding in order to preserve button's outline
$outlinePreservingPadding: c.$grid * 1.25;
// Note: Button width is 98px with border-box applied
/* doiuse-disable calc */
$buttonWidth: calc(98px - 2 * #{$outlinePreservingPadding});
/* doiuse-enable calc */

.container {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;

  .header {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-bottom: c.$grid * 2;
  }

  .timePoints {
    display: flex;
    flex-direction: column;
    overflow-y: scroll;
    padding: $outlinePreservingPadding;
    height: $calendarTimeHeight;
    width: $buttonWidth;
    box-sizing: border-box;

    > .timePoint {
      color: c.$colorTextSubdued;
      /*
       * Note: Using min-height instead of height to workaround IE11 flex-bug
       * where flex text content on overflow: scroll disappears
       */
      min-height: c.$grid * 5;

      @include c.typographyBodySmall;

      &:not(:last-of-type) {
        margin-bottom: c.$grid;
      }

      > .timePointBody {
        padding: 0;
      }
    }
  }
}
