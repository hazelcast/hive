@use '../styles/constants' as c;

.button {
  position: relative;
  z-index: c.$zIndex200;
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  box-sizing: border-box;
  cursor: pointer;
  border: none;
  // Size
  border-radius: c.$borderRadius;
  min-height: c.$grid * 10;
  padding: 0 c.$grid * 5;
  max-width: c.$buttonMaxWidth;

  @include c.typographyButton;

  .outline {
    position: absolute;
    border-radius: c.$borderRadius;
    pointer-events: none;
  }

  &:focus,
  &.focus {
    // Do not remove outline for high-contrast modes
    // https://stackoverflow.com/a/52616313
    outline: c.$outlineWidth solid transparent;

    .outline {
      /* doiuse-disable calc */
      width: calc(100% + #{c.$grid});
      height: calc(100% + #{c.$grid});
      /* doiuse-enable calc */
      z-index: c.$zIndex100;
      box-shadow: 0 0 0 c.$outlineWidth c.$colorAccessibilityOutline;
    }
  }

  &:disabled {
    cursor: not-allowed;
  }

  .iconLeft {
    margin-right: c.$grid * 2;
  }

  .iconRight {
    margin-left: c.$grid * 2;
  }

  .body {
    display: flex;
    flex-direction: row;
    align-items: center;
    max-width: 100%;
  }

  // Kind === primary
  &.primary {
    color: c.$colorNeutralWhite;
    background-color: c.$colorPrimary;

    &:hover,
    &.hover,
    &:focus,
    &.focus {
      background-color: c.$colorPrimaryLight;
    }

    &:active,
    &.active {
      background-color: c.$colorPrimaryDark;
    }

    &:disabled {
      color: c.$colorTextSecondary;
      background-color: c.$colorNeutral;
    }
  }

  // Kind === secondary
  &.secondary {
    color: c.$colorPrimary;
    background-color: transparent;
    border: c.$borderWidthButton solid;
    border-color: c.$colorPrimary;

    &:focus,
    &.focus {
      .outline {
        /* Note: We need to take border of 2*2px into account */
        /* doiuse-disable calc */
        width: calc(100% + #{c.$grid} * 2);
        height: calc(100% + #{c.$grid} * 2);
        /* doiuse-enable calc */
      }
    }

    &:hover,
    &.hover,
    &:focus,
    &.focus {
      color: c.$colorPrimaryLight;
      border-color: c.$colorPrimaryLight;
    }

    &:active,
    &.active {
      color: c.$colorPrimaryDark;
      border-color: c.$colorPrimaryDark;
    }

    &:disabled {
      color: c.$colorTextSecondary;
      border-color: c.$colorNeutral;
    }
  }

  // Kind === transparent
  &.transparent {
    color: inherit;
    background-color: transparent;
  }
}
