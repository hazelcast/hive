@use "../../styles/constants" as c;
@use "../../styles/helpers" as h;

$selectHorizontalPadding: c.$grid * 3;
$menuMargin: c.$grid * 3;
$selectContainer: ":global .hz-select-field";
$selectControl: ":global .hz-select-field__control";
$selectValueContainer: ":global .hz-select-field__value-container";
$selectMenuPortal: ":global .hz-select-field__menu-portal";
$selectMenu: ":global .hz-select-field__menu";
$selectMenuList: ":global .hz-select-field__menu-list";
$selectMenuNotice: ":global .hz-select-field__menu-notice";
$selectOption: ":global .hz-select-field__option";
$selectGroup: ":global .hz-select-field__group";
$selectGroupHeading: ":global .hz-select-field__group-heading";

.container {
  .label {
    display: block;
    margin-bottom: c.$grid;

    &.small {
      @include c.typographyBodySmall;
    }
  }

  .helperText {
    margin-left: c.$grid * 1.5;
    display: block;
  }

  #{$selectContainer} {
    flex: 1 1 auto;
    overflow: hidden;

    @include c.typographyBodySmall;
  }

  #{$selectValueContainer} {
    padding: c.$grid * 1.375 0;
  }

  #{$selectControl} {
    cursor: pointer;
    color: c.$colorText;
    min-height: c.$inputHeight;
    padding-left: c.$grid * 3;
    padding-right: c.$grid * 2;
    box-sizing: border-box;
    border: c.$borderWidth solid c.$colorNeutralLight;
    border-radius: c.$borderRadius;
    background-color: c.$colorNeutralLighter;
    transition: none;
  }

  &.small {
    #{$selectValueContainer} {
      padding: 0;
    }

    #{$selectControl} {
      min-height: c.$inputHeightSmall;
    }
  }

  &.disabled {
    #{$selectControl} {
      color: c.$colorTextSecondary;
      background-color: c.$colorNeutral;
      border-color: c.$colorNeutralLight;
    }
  }

  &.hasError {
    #{$selectControl} {
      border-color: c.$colorError;
    }
  }

  // We target select control specifically to avoid applying hover styles when hovering helper icon
  #{$selectControl}:hover,
  &.hover #{$selectControl} {
    border-color: c.$colorPrimary;
    transition: none;
  }

  &.focus #{$selectControl},
  #{$selectControl}.hz-select-field__control--is-focused {
    @include h.outlineFormField;
  }

  .selectBlock {
    display: flex;
    flex-direction: row;
    align-items: center;
    position: relative;
    overflow: hidden;

    .iconLeftContainer {
      .iconLeft {
        position: absolute;
        left: 0;
        top: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100%;
        z-index: c.$zIndex100;
        padding: 0 c.$grid * 2 0 c.$grid * 3;
      }
    }
  }

  &.hasIcon {
    #{$selectControl} {
      padding-left: c.$grid * 10;
    }

    &.small {
      #{$selectControl} {
        padding-left: c.$grid * 8;
      }
    }
  }
}

.menuContainer {
  #{$selectMenuPortal} {
    z-index: c.$zIndex2000;
  }

  #{$selectMenu} {
    margin-top: $menuMargin;
    margin-bottom: $menuMargin;
    border: c.$borderWidth solid c.$colorNeutralLight;
    border-radius: c.$borderRadius;
    background-color: c.$colorNeutralLighter;
    overflow: hidden;
    box-shadow: 0 c.$selectMenuShadowSize c.$selectMenuShadowBlur 0 c.$colorShadow;
    z-index: c.$zIndex1000;

    @include c.typographyBodySmall;
  }

  #{$selectMenuList} {
    padding: 0;
    color: c.$colorTextSecondary;
  }

  #{$selectOption},
  #{$selectMenuNotice} {
    min-height: c.$inputHeight;
    line-height: c.$inputHeight;
    padding: 0 $selectHorizontalPadding;
    background-color: transparent;

    // Do not remove outline for high-contrast modes
    // https://stackoverflow.com/a/52616313
    outline: c.$outlineWidth solid transparent;
    text-align: left;
  }

  #{$selectOption}--is-focused {
    @include h.outlineSimple;

    color: c.$colorText;
    background-color: c.$colorNeutral;
  }

  #{$selectOption}--is-selected {
    color: c.$colorPrimary;
  }

  #{$selectGroup} {
    padding-top: 0;
    padding-bottom: 0;
  }

  #{$selectGroupHeading} {
    margin-bottom: 0;
    padding-top: 2 * c.$grid;
    padding-bottom: 2 * c.$grid;
    background-color: c.$colorNeutralWhite;
    color: c.$colorTextSecondary;
    font-size: c.$fontSizeBodySmaller;
    font-weight: c.$fontWeightTextBold;
    text-transform: inherit;
  }
}

@include h.withError;
