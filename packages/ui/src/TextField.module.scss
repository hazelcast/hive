@use '../styles/constants' as c;
@use '../styles/helpers' as h;

$inputHorizontalPadding: c.$grid * 3;
$marginLeftWithIcon: c.$grid * 5;

.container {
  @include c.typographyBodySmall;

  color: c.$colorText;
  box-sizing: border-box;
  position: relative;

  .inputBlock {
    margin-top: c.$grid;
    display: flex;
    flex-direction: row;
    align-items: center;
  }

  .errorContainer {
    margin-top: c.$grid;
  }

  .helperText {
    margin-left: c.$grid * 1.5;
    display: block;
  }

  .inputContainer {
    position: relative;
    flex: 1 1 auto;
    display: flex;
    flex-direction: row;
    box-sizing: border-box;
    height: c.$inputHeight;
    background-color: c.$colorNeutralLighter;
    border-radius: c.$borderRadius;
  }

  // Here we go. Another border hack. Why?
  // TextField is re-used for PasswordField. PasswordField is meant for passwords.
  // Passwords are often handled by password managers. Password managers often add their own UI on top of the password inputs.
  // To make our password visibility toggle and their UI not overlap, we have to make the actual input shorter than its visual representation.
  // However, visually we still would like our users to see it as one unit.
  // As result, we cannot apply border to the input itself (because it's shorter).
  // We could have applied border styles to .inputContainer. But IE11 does not support :focus-within.
  // So to properly apply focus styles we need a sibling element to the actual input that supports :focus.
  // .borderOverlay is that very sibling element.
  .borderOverlay {
    position: absolute;
    display: block;
    top: 0;
    left: 0;
    height: 100%;
    width: 100%;
    pointer-events: none;
    z-index: c.$zIndex100;
    border-radius: c.$borderRadius;
    border: c.$borderWidth solid c.$colorNeutralLight;
    box-sizing: border-box;
  }

  .inputIcon {
    position: absolute;
    top: 50%;
    // c.$grid * 9 / 2 is half of the padding. We need to shift it to the left just a bit to account for the border width
    transform: translate(-50%, -50%) translateX(c.$outlineWidth);
    left: ($marginLeftWithIcon + $inputHorizontalPadding) / 2;
  }

  input {
    display: block;
    flex: 1 1 auto;
    background-color: transparent;
    padding: 0 $inputHorizontalPadding;
    margin: 0;
    border: none;
    box-sizing: border-box;
    font-size: inherit;
    line-height: inherit;
    letter-spacing: inherit;
    color: inherit;
    height: 100%;

    &::placeholder {
      color: c.$colorTextSecondary;
    }
  }

  &.mockAutofill {
    input {
      @include h.mockChromeAutofill;
    }
  }

  &.withIcon {
    input {
      padding-left: 0;
      // Chrome fills the input (including paddings) with its custom override color on autofill.
      // If we leave the padding in place it fills a part fo the background for the icon.
      margin-left: $marginLeftWithIcon + $inputHorizontalPadding;
    }
  }

  &.empty {
    color: c.$colorTextSecondary;
  }

  input:hover,
  input.hover {
    & ~ .borderOverlay {
      border-color: c.$colorPrimary;
    }
    & ~ .inputIconContainer > .inputIcon {
      color: c.$colorPrimary;
    }
  }

  &.hasError input {
    & ~ .borderOverlay {
      border-color: c.$colorError;
    }
  }

  input:focus,
  input.focus {
    // Do not remove outline for high-contrast modes
    // https://stackoverflow.com/a/52616313
    outline: transparent solid c.$outlineWidth;

    & ~ .borderOverlay {
      @include h.outlineFormField;
    }
    & ~ .inputIconContainer > .inputIcon {
      color: c.$colorPrimary;
    }
  }

  // .hasError styles split in two groups to always color the icon with the error color but the change the color of the border
  /* stylelint-disable-next-line no-duplicate-selectors */
  &.hasError input {
    ~ .inputIconContainer > .inputIcon {
      color: c.$colorError;
    }
  }

  &.disabled {
    color: c.$colorTextSecondary;

    .inputContainer {
      background-color: c.$colorNeutral;
    }

    input {
      & ~ .borderOverlay {
        border-color: c.$colorNeutralLight;
      }
      & ~ .inputIconContainer > .inputIcon {
        color: c.$colorTextSecondary;
      }
    }
  }
}
