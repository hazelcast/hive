@use '../styles/constants' as c;

$checkboxFontSize: c.$grid * 4;
$borderSize: 1px;

.wrapper {
  display: inline-flex;
  flex-direction: row;
  user-select: none;
  cursor: pointer;
  @include c.typographyBodySmall;

  // default visible checkmark
  .checkmark {
    width: c.$iconSize;
    height: c.$iconSize;
    border: 1px solid c.$colorNeutralLight;
    border-radius: 25%;
    color: c.$colorNeutralWhite;
    // because of ~ and + selectors used below, we need to keep the current order in DOM and
    // fix it visually with order property
    order: -1;
  }

  // Error state
  .error > .checkmark {
    border-color: c.$colorError;
  }

  // Outline on focus
  input:focus ~ .checkmark {
    box-shadow: 0 0 0 c.$outlineWidth c.$colorAccessibilityOutline;
    border-color: transparent;
    outline-color: transparent;
    outline-width: c.$outlineWidth;
  }

  // hide native checkbox
  input {
    height: 0;
    width: 0;
    opacity: 0;
    position: absolute;
  }

  input:checked ~ .checkmark {
    background-color: c.$colorSuccessLight;
    border-color: c.$colorSuccessLight;
  }

  input:indeterminate ~ .checkmark {
    background-color: c.$colorPrimaryLight;
    border: 1px solid transparent;
  }

  .name {
    padding-left: c.$grid * 1.25;
  }
}

.wrapper:not(.checked) {
  color: c.$colorTextSecondary;
}

/**
  Disabled
*/
.wrapper.disabled {
  color: c.$colorNeutralLight;
}

label.wrapper.disabled > input:checked ~ .checkmark,
label.wrapper.disabled > input:indeterminate ~ .checkmark {
  background-color: c.$colorNeutral;
  color: c.$colorNeutralWhite;
  border-color: c.$colorNeutralLight;
}
