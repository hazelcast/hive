@use '../../../styles/constants' as c;
@use '../../../styles/helpers' as h;

$selectContainer: ':global .hz-select-field';
$selectValueContainer: ':global .hz-select-field__value-container';
$selectIndicators: ':global .hz-select-field__indicators';
$selectMultiValue: ':global .hz-select-field__multi-value';

.multiContainer {
  #{$selectValueContainer}--has-value {
    margin-left: -1.5 * c.$grid; // padding is narrower in .multiContainer (when it has any values selected)
  }

  #{$selectIndicators} {
    align-items: flex-start;
    margin-top: c.$grid * 1.5;
  }

  .multiValue {
    background-color: c.$colorNeutralWhite;
    border: c.$borderWidth solid c.$colorNeutralLight;
    border-radius: c.$borderRadius;
    height: c.$grid * 5.5; // makes 22px; design is 21px.
    overflow: hidden;

    &.disabled {
      background-color: c.$colorNeutral;
      color: c.$colorTextSecondary;
    }
  }

  // Styles for MultiValue chips - focused state.
  // We inject `.multiValueIsFocused` from js (it does not have an actual :focused state).
  .multiValueIsFocused {
    @include h.outlineFormField;

    // override our outlineFormField inset shadow, for fixing
    // the glitch case on an hovered remove button.
    box-shadow: 0 0 0 (c.$outlineWidth - c.$borderWidth) c.$colorAccessibilityOutline;
  }

  .multiValueLabel {
    @include c.typographyBodySmall;
    @include h.overflowEllipsis;

    color: c.$colorText;
    padding: 0 c.$grid;
  }

  .multiValueRemove {
    display: flex;
    align-items: center;
    color: c.$colorPrimary;

    &:hover {
      background-color: c.$colorNeutral;
      border-color: c.$colorNeutralLight;
    }

    &.disabled {
      color: c.$colorTextSecondary;
    }
  }

  &.small {
    #{$selectIndicators} {
      margin-top: c.$grid * 0.5;
    }
  }
}

@include h.withError;
